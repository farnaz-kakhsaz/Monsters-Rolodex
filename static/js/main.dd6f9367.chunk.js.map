{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","monster","name","src","id","email","CardList","monsters","map","item","index","key","SearchBox","searchField","placeholder","handleChange","type","value","onChange","App","state","isLoading","bind","url","this","setState","fetch","then","response","json","data","catch","error","console","log","Error","event","target","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qVAIaA,G,MAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBACEC,IAAKF,EAAMG,QAAQC,KACnBC,IAAG,+BAA0BL,EAAMG,QAAQG,GAAxC,eAEL,4BAAKN,EAAMG,QAAQC,MACnB,2BAAIJ,EAAMG,QAAQI,UCPTC,G,MAAW,SAACR,GAAD,OACtB,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAACC,EAAMC,GAAP,OAClB,kBAAC,EAAD,CAAMC,IAAKD,EAAOT,QAASQ,UCJpBG,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,aAA7B,OACvB,2BACEC,KAAK,SACLjB,UAAU,SACVe,YAAaA,EACbG,MAAOJ,EACPK,SAAUH,MCgDCI,G,wDAnDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXb,SAAU,GACVM,YAAa,GACbQ,WAAW,GAEb,EAAKN,aAAe,EAAKA,aAAaO,KAAlB,gBAPR,E,gEAUO,IAAD,OACZC,EAAM,6CACZC,KAAKC,SAAS,CAAEJ,WAAW,IAC3BK,MAAMH,GACHI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKL,SAAS,CAAElB,SAAUuB,EAAMT,WAAW,OAC1DU,OAAM,SAACC,GAEN,MADAC,QAAQC,IAAI,qBAAkBX,EAAM,kCAC9B,IAAIY,MAAMH,Q,mCAITI,GAAQ,IACXnB,EAAUmB,EAAMC,OAAhBpB,MACRO,KAAKC,SAAS,CAAEZ,YAAaI,M,+BAGrB,IAAD,EAC2BO,KAAKJ,MAA/Bb,EADD,EACCA,SAAUM,EADX,EACWA,YACZyB,EAAmB/B,EAASgC,QAAO,SAAC9B,GAAD,OACvCA,EAAKP,KAAKsC,cAAcC,SAAS5B,EAAY2B,kBAG/C,OACE,yBAAKzC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEc,YAAaA,EACbC,YAAY,kBACZC,aAAcS,KAAKT,eAEpBS,KAAKJ,MAAMC,UACV,yBAAKtB,UAAU,YAEf,kBAAC,EAAD,CAAUQ,SAAU+B,S,GA7CZI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0B,c","file":"static/js/main.dd6f9367.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt={props.monster.name}\r\n      src={`https://robohash.org/${props.monster.id}?set=set2`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map((item, index) => (\r\n      <Card key={index} monster={item} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ searchField, placeholder, handleChange }) => (\r\n  <input\r\n    type=\"search\"\r\n    className=\"search\"\r\n    placeholder={placeholder}\r\n    value={searchField}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\",\r\n      isLoading: false,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"https://jsonplaceholder.typicode.com/users\";\r\n    this.setState({ isLoading: true });\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ monsters: data, isLoading: false }))\r\n      .catch((error) => {\r\n        console.log(\"Canâ€™t access \" + url + \" response. Blocked by browser?\");\r\n        throw new Error(error);\r\n      });\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { value } = event.target;\r\n    this.setState({ searchField: value });\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter((item) =>\r\n      item.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox\r\n          searchField={searchField}\r\n          placeholder=\"search monsters\"\r\n          handleChange={this.handleChange}\r\n        />\r\n        {this.state.isLoading ? (\r\n          <div className=\"loading\" />\r\n        ) : (\r\n          <CardList monsters={filteredMonsters} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}